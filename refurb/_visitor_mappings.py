from mypy.nodes import (
    AssertStmt,
    AssertTypeExpr,
    AssignmentExpr,
    AssignmentStmt,
    AwaitExpr,
    BackquoteExpr,
    Block,
    CallExpr,
    CastExpr,
    ClassDef,
    ComparisonExpr,
    ConditionalExpr,
    Decorator,
    DelStmt,
    DictExpr,
    DictionaryComprehension,
    ExecStmt,
    ExpressionStmt,
    ForStmt,
    FuncDef,
    FuncItem,
    GeneratorExpr,
    IfStmt,
    Import,
    ImportFrom,
    IndexExpr,
    LambdaExpr,
    ListComprehension,
    ListExpr,
    MatchStmt,
    MemberExpr,
    MypyFile,
    OperatorAssignmentStmt,
    OpExpr,
    OverloadedFuncDef,
    PrintStmt,
    RaiseStmt,
    ReturnStmt,
    RevealExpr,
    SetComprehension,
    SetExpr,
    SliceExpr,
    StarExpr,
    SuperExpr,
    TryStmt,
    TupleExpr,
    TypeApplication,
    UnaryExpr,
    WhileStmt,
    WithStmt,
    YieldExpr,
    YieldFromExpr,
)
from mypy.patterns import (
    AsPattern,
    ClassPattern,
    MappingPattern,
    OrPattern,
    SequencePattern,
    StarredPattern,
    ValuePattern,
)

# TODO: Dynamically generate this somehow instead of hardcoding it

MAPPINGS = {
    "visit_as_pattern": AsPattern,
    "visit_assert_stmt": AssertStmt,
    "visit_assert_type_expr": AssertTypeExpr,
    "visit_assignment_expr": AssignmentExpr,
    "visit_assignment_stmt": AssignmentStmt,
    "visit_await_expr": AwaitExpr,
    "visit_backquote_expr": BackquoteExpr,
    "visit_block": Block,
    "visit_call_expr": CallExpr,
    "visit_cast_expr": CastExpr,
    "visit_class_def": ClassDef,
    "visit_class_pattern": ClassPattern,
    "visit_comparison_expr": ComparisonExpr,
    "visit_conditional_expr": ConditionalExpr,
    "visit_decorator": Decorator,
    "visit_del_stmt": DelStmt,
    "visit_dict_expr": DictExpr,
    "visit_dictionary_comprehension": DictionaryComprehension,
    "visit_exec_stmt": ExecStmt,
    "visit_expression_stmt": ExpressionStmt,
    "visit_for_stmt": ForStmt,
    "visit_func": FuncItem,
    "visit_func_def": FuncDef,
    "visit_generator_expr": GeneratorExpr,
    "visit_if_stmt": IfStmt,
    "visit_import": Import,
    "visit_import_from": ImportFrom,
    "visit_index_expr": IndexExpr,
    "visit_lambda_expr": LambdaExpr,
    "visit_list_comprehension": ListComprehension,
    "visit_list_expr": ListExpr,
    "visit_mapping_pattern": MappingPattern,
    "visit_match_stmt": MatchStmt,
    "visit_member_expr": MemberExpr,
    "visit_mypy_file": MypyFile,
    "visit_op_expr": OpExpr,
    "visit_operator_assignment_stmt": OperatorAssignmentStmt,
    "visit_or_pattern": OrPattern,
    "visit_overloaded_func_def": OverloadedFuncDef,
    "visit_print_stmt": PrintStmt,
    "visit_raise_stmt": RaiseStmt,
    "visit_return_stmt": ReturnStmt,
    "visit_reveal_expr": RevealExpr,
    "visit_sequence_pattern": SequencePattern,
    "visit_set_comprehension": SetComprehension,
    "visit_set_expr": SetExpr,
    "visit_slice_expr": SliceExpr,
    "visit_star_expr": StarExpr,
    "visit_starred_patten": StarredPattern,
    "visit_super_expr": SuperExpr,
    "visit_try_stmt": TryStmt,
    "visit_tuple_expr": TupleExpr,
    "visit_type_application": TypeApplication,
    "visit_unary_expr": UnaryExpr,
    "visit_value_pattern": ValuePattern,
    "visit_while_stmt": WhileStmt,
    "visit_with_stmt": WithStmt,
    "visit_yield_expr": YieldExpr,
    "visit_yield_from_expr": YieldFromExpr,
}
